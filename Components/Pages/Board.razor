@page "/board"
@page "/board/{CurrentPage:int}"
@page "/board/{CurrentPage:int}/{SearchQuery}"

@using Microsoft.EntityFrameworkCore
@using Blazor_Board.Data
@using Blazor_Board.Models
@using Blazor_Board.Services
@using Blazor_Board.Components.Molecules
@using Blazor_Board.Components.Atoms
@inject UserSession UserSession
@inject ApplicationDbContext _context
@inject IJSRuntime jsRuntime
@inject NavigationManager Navigation

<PageTitle>ボード</PageTitle>

<h1 class="text-2xl font-bold mb-4">ボードリスト</h1>

<div class="flex justify-between items-center mb-4">
    <SearchBar @bind-SearchTerm="searchInput" OnSearch="PerformSearch" />
    <a href="/board/create">
        <PrimaryButton>作成</PrimaryButton>
    </a>
</div>


@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="overflow-x-auto relative shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left text-gray-500">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                <tr>
                    <th scope="col" class="py-3 px-6">No</th>
                    <th scope="col" class="py-3 px-6">タイトル</th>
                    <th scope="col" class="py-3 px-6">作成者</th>
                    <th scope="col" class="py-3 px-6">作成日</th>
                    <th scope="col" class="py-3 px-6">管理</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var post in posts)
                {
                    <tr class="bg-white border-b hover:bg-gray-50">
                        <td class="py-4 px-6">@post.Id</td>
                        <td class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap">
                            <a href="/post/@post.Id" class="text-blue-600 hover:underline">@post.Title</a>
                        </td>
                        <td class="py-4 px-6">@post.Author</td>
                        <td class="py-4 px-6">@post.CreatedAt.ToShortDateString()</td>
                        <td class="py-4 px-6">
                            @if (UserSession.IsLoggedIn && UserSession.CurrentUser?.Role == "Admin")
                            {
                                <button @onclick="() => DeletePost(post.Id)" class="font-medium text-red-600 hover:underline">削除</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-center mt-8">
        <nav aria-label="Page navigation">
            <ul class="inline-flex items-center -space-x-px">
                <li>
                    <a href="@GetPageUrl(CurrentPage - 1)"
                       class="py-2 px-3 ml-0 leading-tight text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 @(CurrentPage <= 1 ? "opacity-50 cursor-not-allowed" : "")">
                        前
                    </a>
                </li>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    var pageNum = i;
                    <li>
                        <a href="@GetPageUrl(pageNum)"
                           class="py-2 px-3 leading-tight border @(i == CurrentPage ? "text-blue-600 bg-blue-50 border-blue-300" : "text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700")">
                            @i
                        </a>
                    </li>
                }
                <li>
                    <a href="@GetPageUrl(CurrentPage + 1)"
                       class="py-2 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 @(CurrentPage >= TotalPages ? "opacity-50 cursor-not-allowed" : "")">
                        次
                    </a>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    private List<Post>? posts;
    private int TotalPages;
    private int PageSize = 5;
    private string? searchInput;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public string? SearchQuery { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        searchInput = SearchQuery;
        if (CurrentPage < 1) CurrentPage = 1;

        IQueryable<Post> query = _context.Posts;

        if (!string.IsNullOrEmpty(SearchQuery))
        {
            query = query.Where(p =>
                p.Title.Contains(SearchQuery) ||
                p.Content.Contains(SearchQuery) ||
                p.Author.Contains(SearchQuery));
        }

        var totalPostCount = await query.CountAsync();
        TotalPages = (int)Math.Ceiling(totalPostCount / (double)PageSize);

        posts = await query
            .OrderByDescending(p => p.Id)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToListAsync();
    }

    private void PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchInput))
        {
            Navigation.NavigateTo("/board");
        }
        else
        {
            Navigation.NavigateTo($"/board/1/{searchInput}");
        }
    }

    private string GetPageUrl(int pageNumber)
    {
        if (pageNumber < 1 || (TotalPages > 0 && pageNumber > TotalPages))
        {
            return "#";
        }

        if (!string.IsNullOrEmpty(SearchQuery))
        {
            return $"/board/{pageNumber}/{SearchQuery}";
        }
        return $"/board/{pageNumber}";
    }

    private async Task DeletePost(int postId)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new object[] { "管理者権限で削除しますか？" });
        if (confirmed)
        {
            var postToDelete = await _context.Posts.FindAsync(postId);
            if (postToDelete != null)
            {
                _context.Posts.Remove(postToDelete);
                await _context.SaveChangesAsync();
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
    }
}