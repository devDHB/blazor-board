@page "/mypage"
@using System.ComponentModel.DataAnnotations
@using Blazor_Board.Services
@using Blazor_Board.Models
@using Blazor_Board.Data
@inject UserSession UserSession
@inject NavigationManager Navigation
@inject ApplicationDbContext _context

<PageTitle>マイインフォメーション</PageTitle>

@if (UserSession.IsLoggedIn)
{
        <div class="max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden">
            <div class="px-6 py-4">
            <h3 class="text-2xl font-bold mb-2 text-center">マイインフォメーション</h3>
                <div class="mt-4 text-gray-700">
                    <div class="flex justify-between py-2 border-b">
                        <span class="font-semibold">ID:</span>
                        <span>@UserSession.CurrentUser?.Username</span>
                    </div>
                    <div class="flex justify-between py-2">
                        <span class="font-semibold">名前:</span>
                        <span>@UserSession.CurrentUser?.Name</span>
                    </div>
                </div>
            </div>
        </div>

    <div class="space-y-10">
        <div class="max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden mt-10">
            <div class="px-6 py-4">
                <h3 class="text-2xl font-bold mb-2 text-center">パスワード変更</h3>

                <EditForm Model="@passwordModel" OnValidSubmit="HandlePasswordChange">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
                            @successMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-4">
                        <label for="currentPassword" class="block mb-2 text-sm font-medium">現在パスワード</label>
                        <InputText id="currentPassword" type="password" class="bg-gray-50 border border-gray-300 text-sm rounded-lg block w-full p-2.5" @bind-Value="passwordModel.CurrentPassword" />
                    </div>
                    <div class="mb-4">
                        <label for="newPassword" class="block mb-2 text-sm font-medium">新パスワード</label>
                        <InputText id="newPassword" type="password" class="bg-gray-50 border border-gray-300 text-sm rounded-lg block w-full p-2.5" @bind-Value="passwordModel.NewPassword" />
                    </div>
                    <div class="mb-6">
                        <label for="confirmPassword" class="block mb-2 text-sm font-medium">新パスワード確認</label>
                        <InputText id="confirmPassword" type="password" class="bg-gray-50 border border-gray-300 text-sm rounded-lg block w-full p-2.5" @bind-Value="passwordModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                    </div>

                    <button type="submit" class="w-full text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                        パスワード変更
                    </button>
                </EditForm>
            </div>
        </div>

    </div>
}

@code {
    private PasswordChangeModel passwordModel = new();
    private string? errorMessage;
    private string? successMessage;

    // 비밀번호 변경 폼 데이터를 담을 전용 모델
    public class PasswordChangeModel
    {
        public string CurrentPassword { get; set; }
        public string NewPassword { get; set; }

        [Compare(nameof(NewPassword), ErrorMessage = "新しいパスワードが一致しません。")]
        public string ConfirmPassword { get; set; }
    }

    protected override void OnInitialized()
    {
        if (!UserSession.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private async Task HandlePasswordChange()
    {
        errorMessage = null;
        successMessage = null;

        // 1. 현재 로그인한 사용자의 정보를 DB에서 다시 불러옴
        var user = await _context.Users.FindAsync(UserSession.CurrentUser.Id);

        // 2. 현재 비밀번호가 맞는지 확인
        if (user == null || user.Password != passwordModel.CurrentPassword)
        {
            errorMessage = "現在のパスワードが正しくありません。";
            return;
        }

        // 3. 새 비밀번호로 업데이트 후 저장
        user.Password = passwordModel.NewPassword;
        await _context.SaveChangesAsync();

        successMessage = "パスワードが正常に変更されました。";
        passwordModel = new(); // 폼 초기화
    }
}