@page "/post/edit/{PostId:int}"
@using Microsoft.EntityFrameworkCore
@using Blazor_Board.Data
@using Blazor_Board.Models
@using Blazor_Board.Services
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject UserSession UserSession


<PageTitle>ポスト修正</PageTitle>

@if (postToEdit == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3 class="text-2xl font-bold mb-4">ポスト修正</h3>

    <EditForm Model="@postToEdit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label for="author" class="block mb-2 text-sm font-medium text-gray-900">作成者</label>
            <InputText id="author" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5" @bind-Value="postToEdit.Author" />
        </div>
        <div class="mb-4">
            <label for="title" class="block mb-2 text-sm font-medium text-gray-900">タイトル</label>
            <InputText id="title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5" @bind-Value="postToEdit.Title" />
        </div>
        <div class="mb-4">
            <label for="content" class="block mb-2 text-sm font-medium text-gray-900">内容</label>
            <InputTextArea id="content" rows="6" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300" @bind-Value="postToEdit.Content" />
        </div>

        <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
            修正完了
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public int PostId { get; set; }

    private Post? postToEdit;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        postToEdit = await context.Posts.FindAsync(PostId);

        // 権限確認ロジック追加
        // ログインしていないか、作成者でもなく管理者でもない場合は、掲示板に移動
        if (!UserSession.IsLoggedIn || (postToEdit?.UserId != UserSession.CurrentUser.Id && UserSession.CurrentUser.Role != "Admin"))
        {
            Navigation.NavigateTo("/board", forceLoad: true);
        }
    }

    private async Task HandleValidSubmit()
    {
        using var context = DbFactory.CreateDbContext();
        context.Posts.Update(postToEdit);
        // 変更された内容をDBに最終保存
        await context.SaveChangesAsync();

        Navigation.NavigateTo($"/post/{PostId}");
    }
}